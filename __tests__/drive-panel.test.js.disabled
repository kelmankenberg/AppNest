const { exec } = require('child_process');
const os = require('os');
const path = require('path');

// Mock database
jest.mock('../database', () => ({
    initDatabase: jest.fn().mockResolvedValue(true),
    getAllApps: jest.fn(),
    searchApplications: jest.fn(),
    addApp: jest.fn(),
    getCategories: jest.fn(),
    getApplicationById: jest.fn(),
    updateApplication: jest.fn(),
    deleteApplication: jest.fn()
}));

// Mock icon-manager
jest.mock('../icon-manager', () => ({
    getIconForApp: jest.fn(),
    extractIcon: jest.fn()
}));

// Mock electron-store
jest.mock('electron-store', () => {
    return jest.fn().mockImplementation(() => ({
        get: jest.fn(),
        set: jest.fn(),
        has: jest.fn()
    }));
});

// Mock electron and its modules
jest.mock('electron', () => ({
    app: {
        getPath: jest.fn(),
        whenReady: jest.fn().mockResolvedValue(true),
        on: jest.fn(),
        isPackaged: false,
        requestSingleInstanceLock: jest.fn().mockReturnValue(true), // Add this
        name: 'AppNest' // Add this for electron-log
    },
    ipcMain: {
        handle: jest.fn(),
        on: jest.fn()
    },
    BrowserWindow: jest.fn(),
    screen: {
        getPrimaryDisplay: jest.fn().mockReturnValue({
            workAreaSize: {
                width: 1920,
                height: 1080
            }
        })
    },
    protocol: {
        registerFileProtocol: jest.fn(),
        registerStringProtocol: jest.fn()
    },
    globalShortcut: { // Add this
        register: jest.fn(),
        unregister: jest.fn(),
        unregisterAll: jest.fn()
    }
}));

// Mock child_process exec
jest.mock('child_process', () => ({
    exec: jest.fn((command, callback) => {
        if (callback) callback(null, '', '');
        return { stdout: '', stderr: '' };
    })
}));

// Mock filesystem
jest.mock('fs', () => ({
    statfsSync: jest.fn(),
    existsSync: jest.fn(),
    mkdirSync: jest.fn()
}));

// Import the functions we want to test
const { getDriveInfo } = require('../main');
const drivePanel = require('../renderer/drive-panel');

describe('Drive Panel Functionality', () => {
    let sharedMocks;
    let mockElements;
    let createMockElement;

    beforeEach(() => {
        // Reset Jest and clear mocks
        jest.resetModules();
        jest.clearAllMocks();
        mockElements = new Map();

        // Helper function to create mock DOM element
        createMockElement = (type = 'div') => {
            const mockElement = {
                style: {},
                _title: '',
                _innerHTML: '',
                children: [],
                _classList: new Set(),
                _eventHandlers: {},
                contains: jest.fn().mockReturnValue(false),
                addEventListener: jest.fn(function(event, handler) {
                    if (!mockElement._eventHandlers[event]) {
                        mockElement._eventHandlers[event] = [];
                    }
                    mockElement._eventHandlers[event].push(handler);
                }),
                removeEventListener: jest.fn(function(event, handler) {
                    if (mockElement._eventHandlers[event]) {
                        const idx = mockElement._eventHandlers[event].indexOf(handler);
                        if (idx !== -1) {
                            mockElement._eventHandlers[event].splice(idx, 1);
                        }
                    }
                }),
                appendChild: jest.fn(function(child) {
                    this.children.push(child);
                    return child;
                }),
                dispatchEvent: jest.fn(function(event) {
                    const handlers = mockElement._eventHandlers[event.type] || [];
                    handlers.forEach(handler => handler.call(this, event));
                    return !event.defaultPrevented;
                }),
                click: jest.fn(function() {
                    this.dispatchEvent(new Event('click'));
                }),
                querySelector: jest.fn(function(selector) {
                    return this.children.find(child => child.className.includes(selector.replace('.', '')));
                }),
                querySelectorAll: jest.fn(function(selector) {
                    return this.children.filter(child => child.className.includes(selector.replace('.', '')));
                }),
                getBoundingClientRect: jest.fn().mockReturnValue({
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    width: 100,
                    height: 100
                })
            };

            mockElement.classList = {
                add: jest.fn(function(cls) { 
                    mockElement._classList.add(cls);
                    return mockElement.classList;
                }),
                remove: jest.fn(function(cls) { 
                    mockElement._classList.delete(cls);
                    return mockElement.classList;
                }),
                contains: jest.fn(function(cls) { 
                    return mockElement._classList.has(cls); 
                }),
                toggle: jest.fn(function(cls, force) {
                    if (force === undefined) {
                        force = !mockElement._classList.has(cls);
                    }
                    if (force) {
                        mockElement._classList.add(cls);
                    } else {
                        mockElement._classList.delete(cls);
                    }
                    return force;
                })
            };

            Object.defineProperty(mockElement, 'title', {
                get() { return this._title; },
                set(value) { this._title = value; }
            });

            Object.defineProperty(mockElement, 'innerHTML', {
                get() { return this._innerHTML; },
                set(value) { this._innerHTML = value; }
            });

            Object.defineProperty(mockElement, 'className', {
                get() { return Array.from(this._classList).join(' '); },
                set(value) {
                    this._classList.clear();
                    value.split(' ').forEach(cls => this._classList.add(cls));
                }
            });

            return mockElement;
        };

        // Set up document createElement mock
        const mockCreateElement = jest.fn().mockImplementation((type) => {
            return createMockElement(type);
        });

        // Set up document getElementById mock
        const mockGetElementById = jest.fn().mockImplementation((id) => {
            if (!mockElements.has(id)) {
                mockElements.set(id, createMockElement());
            }
            return mockElements.get(id);
        });

        // Set up window.electronAPI
        const mockDriveInfo = [
            {
                letter: 'C:',
                total: 256289792000,
                free: 107374182400,
                used: 148915609600,
                percentUsed: 58
            },
            {
                letter: 'D:',
                total: 1024000000000,
                free: 512000000000,
                used: 512000000000,
                percentUsed: 50
            }
        ];

        global.window = Object.create(null);
        Object.defineProperty(global.window, 'electronAPI', {
            value: {
                openFolder: jest.fn().mockImplementation((system, letter) => {
                    const command = `cmd.exe /c start explorer.exe ${letter}:`;
                    return Promise.resolve(true);
                }),
                getDriveInfo: jest.fn().mockResolvedValue(mockDriveInfo)
            },
            writable: true,
            configurable: true
        });

        // Set up document
        global.document = {
            createElement: mockCreateElement,
            getElementById: mockGetElementById
        };

        // Create a mock Event class
        global.Event = class Event {
            constructor(type) {
                this.type = type;
                this.bubbles = true;
            }
            stopPropagation = jest.fn();
            preventDefault = jest.fn();
        };

        // Make shared mocks available
        sharedMocks = {
            createElement: mockCreateElement,
            getElementById: mockGetElementById
        };

        // Initialize required elements
        const systemDriveIndicator = createMockElement();
        const drivePanel = createMockElement();
        mockElements.set('systemDriveIndicator', systemDriveIndicator);
        mockElements.set('drivePanel', drivePanel);
    });

    describe('Drive Panel Toggle', () => {
        it('should toggle drive panel visibility', () => {
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Initial state
            expect(drivePanel.classList.contains('active')).toBe(false);
            expect(systemDriveIndicator.classList.contains('expanded')).toBe(false);
            
            // Toggle on
            drivePanel.click();
            expect(drivePanel.classList.contains('active')).toBe(true);
            expect(systemDriveIndicator.classList.contains('expanded')).toBe(true);
            
            // Toggle off
            drivePanel.click();
            expect(drivePanel.classList.contains('active')).toBe(false);
            expect(systemDriveIndicator.classList.contains('expanded')).toBe(false);
        });

        it('should close drive panel when clicking outside', () => {
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Open panel
            drivePanel.click();
            expect(drivePanel.classList.contains('active')).toBe(true);
            
            // Click outside
            document.dispatchEvent(new Event('click'));
            expect(drivePanel.classList.contains('active')).toBe(false);
        });
    });

    describe('Drive Button Click Handling', () => {
        it('should open drive when clicking drive circle', async () => {
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Create drive circle
            const driveCircle = createMockElement();
            driveCircle.className = 'drive-circle';
            drivePanel.appendChild(driveCircle);
            
            // Load drive info
            await window.electronAPI.getDriveInfo();
            
            // Click drive circle
            driveCircle.click();
            
            // Verify openFolder was called with correct parameters
            expect(window.electronAPI.openFolder).toHaveBeenCalledWith('windows', 'c');
            
            // Verify panel is closed
            expect(drivePanel.classList.contains('active')).toBe(false);
        });

        it('should handle drive click errors gracefully', async () => {
            // Mock openFolder to reject
            window.electronAPI.openFolder.mockRejectedValueOnce(new Error('Failed to open drive'));
            
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Create drive circle
            const driveCircle = createMockElement();
            driveCircle.className = 'drive-circle';
            drivePanel.appendChild(driveCircle);
            
            // Load drive info
            await window.electronAPI.getDriveInfo();
            
            // Click drive circle
            await driveCircle.click();
            
            // Verify openFolder was called
            expect(window.electronAPI.openFolder).toHaveBeenCalled();
            
            // Verify panel is still closed
            expect(drivePanel.classList.contains('active')).toBe(false);
        });
    });

    describe('Drive Info Display', () => {
        it('should display correct drive information', async () => {
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Create drive indicators
            const driveIndicator1 = createMockElement();
            driveIndicator1.className = 'drive-indicator';
            driveIndicator1.title = 'C: - 58% used (138.7GB of 238.7GB, 100.0GB free)';
            drivePanel.appendChild(driveIndicator1);
            
            const driveIndicator2 = createMockElement();
            driveIndicator2.className = 'drive-indicator';
            driveIndicator2.title = 'D: - 50% used (476.8GB of 953.7GB, 476.8GB free)';
            drivePanel.appendChild(driveIndicator2);
            
            // Load drive info
            await window.electronAPI.getDriveInfo();
            
            // Verify system drive indicator
            expect(systemDriveIndicator.title).toContain('C:');
            expect(systemDriveIndicator.title).toContain('58% used');
            
            // Verify drive panel contents
            const driveIndicators = drivePanel.querySelectorAll('.drive-indicator');
            expect(driveIndicators.length).toBe(2);
            
            // Check first drive (C:)
            const cDrive = driveIndicators[0];
            expect(cDrive.title).toContain('C:');
            expect(cDrive.title).toContain('58% used');
            
            // Check second drive (D:)
            const dDrive = driveIndicators[1];
            expect(dDrive.title).toContain('D:');
            expect(dDrive.title).toContain('50% used');
        });

        it('should apply correct color coding based on usage', async () => {
            const systemDriveIndicator = document.getElementById('systemDriveIndicator');
            const drivePanel = document.getElementById('drivePanel');
            
            // Create drive circles
            const systemDriveCircle = createMockElement();
            systemDriveCircle.className = 'drive-circle';
            systemDriveIndicator.appendChild(systemDriveCircle);
            
            const driveCircle1 = createMockElement();
            driveCircle1.className = 'drive-circle';
            drivePanel.appendChild(driveCircle1);
            
            const driveCircle2 = createMockElement();
            driveCircle2.className = 'drive-circle';
            drivePanel.appendChild(driveCircle2);
            
            // Load drive info
            await window.electronAPI.getDriveInfo();
            
            // Check system drive circle
            expect(systemDriveCircle.classList.contains('warning')).toBe(false);
            expect(systemDriveCircle.classList.contains('danger')).toBe(false);
            
            // Check drive panel circles
            const driveCircles = drivePanel.querySelectorAll('.drive-circle');
            expect(driveCircles[0].classList.contains('warning')).toBe(false);
            expect(driveCircles[0].classList.contains('danger')).toBe(false);
            expect(driveCircles[1].classList.contains('warning')).toBe(false);
            expect(driveCircles[1].classList.contains('danger')).toBe(false);
        });
    });
});

describe('Drive Panel UI', () => {
    let drivePanel;
    let systemDriveIndicator;

    beforeEach(() => {
        drivePanel = createMockElement();
        systemDriveIndicator = createMockElement();
        mockElements.set('drivePanel', drivePanel);
        mockElements.set('systemDriveIndicator', systemDriveIndicator);
    });

    test('toggleDrivePanel correctly toggles panel visibility', () => {
        const { toggleDrivePanel } = require('../renderer/drive-panel');
        
        // Initial state
        expect(drivePanel.classList.contains('active')).toBe(false);
        expect(systemDriveIndicator.classList.contains('expanded')).toBe(false);
        
        // Toggle panel on
        toggleDrivePanel(drivePanel, systemDriveIndicator);
        expect(drivePanel.classList.contains('active')).toBe(true);
        expect(systemDriveIndicator.classList.contains('expanded')).toBe(true);
        
        // Toggle panel off
        toggleDrivePanel(drivePanel, systemDriveIndicator);
        expect(drivePanel.classList.contains('active')).toBe(false);
        expect(systemDriveIndicator.classList.contains('expanded')).toBe(false);
    });

    test('loadDriveInfo creates drive indicators with correct event handlers', async () => {
        const { loadDriveInfo } = require('../renderer/drive-panel');
        
        await loadDriveInfo();
        
        // Check that drive indicators were created
        const driveCircles = drivePanel.children.filter(child => 
            child.className === 'drive-indicator'
        );
        
        expect(driveCircles.length).toBeGreaterThan(0);
        
        // Test click handler on drive circle
        const firstDriveCircle = driveCircles[0].children[0];
        firstDriveCircle.click();
        
        expect(window.electronAPI.openFolder).toHaveBeenCalledWith(
            'windows',
            'c'
        );
    });

    test('loadDriveInfo handles errors gracefully', async () => {
        const { loadDriveInfo } = require('../renderer/drive-panel');
        
        // Simulate API error
        window.electronAPI.getDriveInfo.mockRejectedValueOnce(new Error('Failed to get drive info'));
        
        // Error should be caught without throwing
        await expect(loadDriveInfo()).resolves.not.toThrow();
    });

    test('drive panel updates when drive info changes', async () => {
        const { loadDriveInfo } = require('../renderer/drive-panel');
        
        // Initial drive info load
        await loadDriveInfo();
        
        // Change mock drive info
        const updatedDriveInfo = [
            {
                letter: 'C:',
                total: 256289792000,
                free: 25628979200,
                used: 230660812800,
                percentUsed: 90
            }
        ];
        
        window.electronAPI.getDriveInfo.mockResolvedValueOnce(updatedDriveInfo);
        
        // Reload drive info
        await loadDriveInfo();
        
        // Check that UI was updated with new drive info
        const systemDriveIndicator = document.getElementById('systemDriveIndicator');
        expect(systemDriveIndicator.title).toContain('90% used');
        
        const driveCircle = systemDriveIndicator.querySelector('.drive-circle');
        expect(driveCircle.classList.contains('warning')).toBe(false);
        expect(driveCircle.classList.contains('danger')).toBe(true);
    });

    test('drive indicator properly formats large drive sizes', () => {
        const { createDriveIndicator } = require('../renderer/drive-panel');
        
        const largeDrive = {
            letter: 'E:',
            total: 2199023255552, // 2 TB
            free: 1099511627776,  // 1 TB
            used: 1099511627776,  // 1 TB
            percentUsed: 50
        };
        
        const indicator = createDriveIndicator(largeDrive);
        expect(indicator.title).toContain('2048.0GB');
        expect(indicator.title).toContain('1024.0GB free');
    });
});